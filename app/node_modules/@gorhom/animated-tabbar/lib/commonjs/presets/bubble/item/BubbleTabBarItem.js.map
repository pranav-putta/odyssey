{"version":3,"sources":["BubbleTabBarItem.tsx"],"names":["add","interpolate","Animated","BubbleTabBarItemComponent","animatedFocus","label","icon","background","labelStyle","labelStyleOverride","itemInnerSpace","itemOuterSpace","iconSize","isRTL","itemInnerVerticalSpace","itemInnerHorizontalSpace","itemOuterVerticalSpace","itemOuterHorizontalSpace","_itemInnerVerticalSpace","_itemInnerHorizontalSpace","_itemOuterVerticalSpace","_itemOuterHorizontalSpace","vertical","DEFAULT_ITEM_INNER_SPACE","horizontal","DEFAULT_ITEM_OUTER_SPACE","labelWidth","minWidth","maxWidth","animatedIconColor","inputRange","outputRange","inactiveColor","activeColor","containerStyle","styles","container","paddingHorizontal","paddingVertical","width","contentContainerStyle","contentContainer","flexDirection","borderRadius","backgroundColor","labelContainerStyle","labelContainer","opacity","iconContainerStyle","iconContainer","minHeight","handleTextLayout","nativeEvent","layout","requestAnimationFrame","setValue","renderIcon","IconComponent","component","color","size","BubbleTabBarItem","isEqual"],"mappings":"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","sourcesContent":["import React, { useMemo, memo } from 'react';\nimport { View, Text, LayoutChangeEvent } from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport { interpolateColor, useValue } from 'react-native-redash';\n// @ts-ignore ðŸ˜ž\nimport isEqual from 'lodash.isequal';\nimport {\n  DEFAULT_ITEM_INNER_SPACE,\n  DEFAULT_ITEM_OUTER_SPACE,\n} from '../constants';\nimport type { BubbleTabBarItemProps } from '../types';\nimport { styles } from './styles';\n\nconst { add, interpolate } = Animated;\n\nconst BubbleTabBarItemComponent = ({\n  animatedFocus,\n  label,\n  icon,\n  background,\n  labelStyle: labelStyleOverride,\n  itemInnerSpace,\n  itemOuterSpace,\n  iconSize,\n  isRTL,\n}: BubbleTabBarItemProps) => {\n  //#region extract props\n  const {\n    itemInnerVerticalSpace,\n    itemInnerHorizontalSpace,\n    itemOuterVerticalSpace,\n    itemOuterHorizontalSpace,\n  } = useMemo(() => {\n    let _itemInnerVerticalSpace,\n      _itemInnerHorizontalSpace,\n      _itemOuterVerticalSpace,\n      _itemOuterHorizontalSpace = 0;\n\n    if (typeof itemInnerSpace === 'number') {\n      _itemInnerVerticalSpace = itemInnerSpace;\n      _itemInnerHorizontalSpace = itemInnerSpace;\n    } else {\n      _itemInnerVerticalSpace =\n        itemInnerSpace?.vertical ?? DEFAULT_ITEM_INNER_SPACE;\n      _itemInnerHorizontalSpace =\n        itemInnerSpace?.horizontal ?? DEFAULT_ITEM_INNER_SPACE;\n    }\n    if (typeof itemOuterSpace === 'number') {\n      _itemOuterVerticalSpace = itemOuterSpace;\n      _itemOuterHorizontalSpace = itemOuterSpace;\n    } else {\n      _itemOuterVerticalSpace =\n        itemOuterSpace?.vertical ?? DEFAULT_ITEM_OUTER_SPACE;\n      _itemOuterHorizontalSpace =\n        itemOuterSpace?.horizontal ?? DEFAULT_ITEM_OUTER_SPACE;\n    }\n    return {\n      itemInnerVerticalSpace: _itemInnerVerticalSpace,\n      itemInnerHorizontalSpace: _itemInnerHorizontalSpace,\n      itemOuterVerticalSpace: _itemOuterVerticalSpace,\n      itemOuterHorizontalSpace: _itemOuterHorizontalSpace,\n    };\n  }, [itemInnerSpace, itemOuterSpace]);\n  //#endregion\n\n  //#region variables\n  const labelWidth = useValue<number>(0);\n  /**\n   * @DEV\n   * min width is calculated by adding outer & inner spaces\n   * with the icon size.\n   */\n  const minWidth = useMemo(() => {\n    return (\n      itemInnerHorizontalSpace * 2 + iconSize + itemOuterHorizontalSpace * 2\n    );\n  }, [itemInnerHorizontalSpace, itemOuterHorizontalSpace, iconSize]);\n  /**\n   * @DEV\n   * max width is calculated by adding inner space with label width\n   */\n  const maxWidth = add(labelWidth, itemInnerHorizontalSpace, minWidth);\n  //#endregion\n\n  //#region styles\n  const animatedIconColor = interpolateColor(animatedFocus, {\n    inputRange: [0, 1],\n    outputRange: [icon.inactiveColor, icon.activeColor],\n  });\n  const containerStyle = [\n    styles.container,\n    {\n      paddingHorizontal: itemOuterHorizontalSpace,\n      paddingVertical: itemOuterVerticalSpace,\n      width: interpolate(animatedFocus, {\n        inputRange: [0, 1],\n        outputRange: [minWidth, maxWidth],\n      }),\n    },\n  ];\n  const contentContainerStyle = [\n    styles.contentContainer,\n    {\n      flexDirection: isRTL ? 'row-reverse' : 'row',\n      paddingHorizontal: itemInnerHorizontalSpace,\n      paddingVertical: itemInnerVerticalSpace,\n      borderRadius: itemInnerVerticalSpace * 2 + iconSize,\n      backgroundColor: interpolateColor(animatedFocus, {\n        inputRange: [0, 1],\n        outputRange: [background.inactiveColor, background.activeColor],\n      }),\n    },\n  ];\n  const labelContainerStyle = [\n    styles.labelContainer,\n    {\n      opacity: interpolate(animatedFocus, {\n        inputRange: [0.33, 1],\n        outputRange: [0, 1],\n      }),\n      [isRTL ? 'left' : 'right']: interpolate(animatedFocus, {\n        inputRange: [0, 1],\n        outputRange: [0, itemInnerHorizontalSpace + itemOuterHorizontalSpace],\n      }),\n    },\n  ];\n  const iconContainerStyle = [\n    styles.iconContainer,\n    {\n      minHeight: iconSize,\n      minWidth: iconSize,\n    },\n  ];\n  const labelStyle = [styles.label, labelStyleOverride];\n  //#endregion\n\n  // callbacks\n  const handleTextLayout = ({\n    nativeEvent: {\n      layout: { width },\n    },\n  }: LayoutChangeEvent) =>\n    requestAnimationFrame(() => labelWidth.setValue(width));\n\n  // render\n  const renderIcon = () => {\n    const IconComponent: any = icon.component;\n    return typeof IconComponent === 'function' ? (\n      IconComponent({\n        animatedFocus,\n        color: animatedIconColor,\n        size: iconSize,\n      })\n    ) : (\n      <IconComponent\n        animatedFocus={animatedFocus}\n        color={animatedIconColor}\n        size={iconSize}\n      />\n    );\n  };\n\n  return (\n    <Animated.View style={containerStyle}>\n      <Animated.View style={contentContainerStyle}>\n        <View style={iconContainerStyle}>{renderIcon()}</View>\n      </Animated.View>\n      <Animated.View style={labelContainerStyle}>\n        <Text onLayout={handleTextLayout} style={labelStyle} numberOfLines={1}>\n          {label}\n        </Text>\n      </Animated.View>\n    </Animated.View>\n  );\n};\n\nconst BubbleTabBarItem = memo(BubbleTabBarItemComponent, isEqual);\n\nexport default BubbleTabBarItem;\n"]}