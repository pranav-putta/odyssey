{"version":3,"sources":["AnimatedTabBar.tsx"],"names":["React","useMemo","useCallback","useSafeArea","AnimatedTabBarView","useStableCallback","AnimatedTabBar","props","tabs","state","navigation","descriptors","onTabPress","onTabLongPress","style","overrideStyle","safeAreaInsets","overrideSafeAreaInsets","rest","bottom","_safeBottomArea","safeBottomArea","paddingBottom","isReactNavigation5","Boolean","CommonActions","_CommonActions","require","undefined","index","navigationIndex","key","navigationKey","routes","getRouteTitle","route","options","tabBarLabel","title","name","getRouteTabConfigs","routesWithTabConfig","reduce","result","handleIndexChange","focused","event","emit","type","target","canPreventDefault","defaultPrevented","dispatch","navigate","handleLongPress"],"mappings":"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","sourcesContent":["import React, { useMemo, useCallback } from 'react';\nimport { useSafeArea } from 'react-native-safe-area-context';\nimport { AnimatedTabBarView } from './AnimatedTabBarView';\nimport { useStableCallback } from './utilities';\nimport type { PresetEnum } from './presets';\nimport type { AnimatedTabBarProps } from './types';\n\ninterface Route {\n  name: string;\n  key: string;\n}\n\nexport function AnimatedTabBar<T extends PresetEnum>(\n  props: AnimatedTabBarProps<T>\n) {\n  // props\n  const {\n    tabs,\n    state,\n    navigation,\n    descriptors,\n    onTabPress,\n    onTabLongPress,\n    style: overrideStyle,\n    safeAreaInsets: overrideSafeAreaInsets,\n    ...rest\n  } = props;\n\n  //#region styles\n  const { bottom: _safeBottomArea } = useSafeArea();\n  const safeBottomArea = useMemo(\n    () => overrideSafeAreaInsets?.bottom ?? _safeBottomArea,\n    [overrideSafeAreaInsets, _safeBottomArea]\n  );\n  const style = useMemo(\n    () => ({\n      // @ts-ignore\n      ...overrideStyle,\n      ...{ paddingBottom: safeBottomArea },\n    }),\n    [overrideStyle, safeBottomArea]\n  );\n  //#endregion\n\n  //#region variables\n  const isReactNavigation5 = useMemo(() => Boolean(state), [state]);\n  const CommonActions = useMemo(() => {\n    if (isReactNavigation5) {\n      const {\n        CommonActions: _CommonActions,\n      } = require('@react-navigation/native');\n      return _CommonActions;\n    } else {\n      return undefined;\n    }\n  }, [isReactNavigation5]);\n  const {\n    index: navigationIndex,\n    key: navigationKey,\n    routes,\n  }: {\n    index: number;\n    routes: Route[];\n    key: string;\n  } = useMemo(() => {\n    if (isReactNavigation5) {\n      return state;\n    } else {\n      return {\n        index: navigation!.state.index,\n        routes: navigation!.state.routes,\n        key: '',\n      };\n    }\n  }, [state, navigation, isReactNavigation5]);\n\n  const getRouteTitle = useCallback(\n    (route: Route) => {\n      if (isReactNavigation5) {\n        const { options } = descriptors[route.key];\n        return options.tabBarLabel !== undefined &&\n          typeof options.tabBarLabel === 'string'\n          ? options.tabBarLabel\n          : options.title !== undefined\n          ? options.title\n          : route.name;\n      } else {\n        return route.key;\n      }\n    },\n    [isReactNavigation5, descriptors]\n  );\n\n  const getRouteTabConfigs = useCallback(\n    (route: Route) => {\n      if (isReactNavigation5) {\n        return tabs[route.name];\n      } else {\n        return tabs[route.key];\n      }\n    },\n    [isReactNavigation5, tabs]\n  );\n\n  const routesWithTabConfig = useMemo(() => {\n    return routes.reduce((result: { [key: string]: {} }, route) => {\n      result[route.key] = {\n        title: getRouteTitle(route),\n        ...getRouteTabConfigs(route),\n      };\n      return result;\n    }, {});\n  }, [routes, getRouteTitle, getRouteTabConfigs]) as any;\n  //#endregion\n\n  //#region callbacks\n  const handleIndexChange = useStableCallback((index: number) => {\n    if (isReactNavigation5) {\n      const focused = index === navigationIndex;\n      const { key, name } = routes[index];\n\n      const event = navigation.emit({\n        type: 'tabPress',\n        target: key,\n        canPreventDefault: true,\n      });\n\n      if (!focused && !event.defaultPrevented) {\n        navigation.dispatch({\n          ...CommonActions.navigate(name),\n          target: navigationKey,\n        });\n      }\n    } else {\n      onTabPress({ route: routes[index] });\n    }\n  });\n  const handleLongPress = useStableCallback((index: number) => {\n    if (isReactNavigation5) {\n      const { key } = routes[index];\n      navigation.emit({\n        type: 'tabLongPress',\n        target: key,\n      });\n    } else {\n      onTabLongPress({ route: routes[index] });\n    }\n  });\n  //#endregion\n\n  // render\n  return (\n    <AnimatedTabBarView\n      index={navigationIndex}\n      onIndexChange={handleIndexChange}\n      onLongPress={handleLongPress}\n      tabs={routesWithTabConfig}\n      style={style}\n      {...rest}\n    />\n  );\n}\n"]}