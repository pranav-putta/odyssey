{"version":3,"sources":["MaterialTabBar.tsx"],"names":["React","useMemo","memo","useState","View","isEqual","MaterialTabBarItem","MaterialTabBarRipple","RawButton","DEFAULT_ITEM_ANIMATION_DURATION","DEFAULT_ITEM_ANIMATION_EASING","DEFAULT_ITEM_INNER_SPACE","DEFAULT_ITEM_OUTER_SPACE","DEFAULT_ITEM_ICON_SIZE","DEFAULT_ITEM_LAYOUT_DIRECTION","DEFAULT_ITEM_CONTAINER_WIDTH","DEFAULT_CONFIG_ANIMATION","DEFAULT_CONFIG_INACTIVE_OPACITY","DEFAULT_CONFIG_INACTIVE_SCALE","withTransition","noop","useStableCallback","styles","MaterialTabBarComponent","selectedIndex","tabs","duration","easing","animation","inactiveOpacity","inactiveScale","itemInnerSpace","itemOuterSpace","itemContainerWidth","iconSize","isRTL","style","containerStyleOverride","onLongPress","animatedOnChange","containerLayout","setContainerLayout","width","height","tabsPosition","setTabsPosition","animatedFocusValues","map","_","index","containerStyle","container","flexDirection","backgroundColor","_value","ripple","color","rawButtonStyle","flex","handleTabItemLayout","position","state","handleContainerLayout","nativeEvent","layout","Object","keys","length","values","key","title","configs","MaterialTabBar"],"mappings":"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","sourcesContent":["import React, { useMemo, memo, useState } from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleProp,\n  LayoutRectangle,\n  LayoutChangeEvent,\n} from 'react-native';\n// @ts-ignore ðŸ˜ž\nimport isEqual from 'lodash.isequal';\nimport MaterialTabBarItem from './item';\nimport MaterialTabBarRipple from './ripple';\nimport RawButton from '../../components/rawButton';\nimport {\n  DEFAULT_ITEM_ANIMATION_DURATION,\n  DEFAULT_ITEM_ANIMATION_EASING,\n  DEFAULT_ITEM_INNER_SPACE,\n  DEFAULT_ITEM_OUTER_SPACE,\n  DEFAULT_ITEM_ICON_SIZE,\n  DEFAULT_ITEM_LAYOUT_DIRECTION,\n  DEFAULT_ITEM_CONTAINER_WIDTH,\n  DEFAULT_CONFIG_ANIMATION,\n  DEFAULT_CONFIG_INACTIVE_OPACITY,\n  DEFAULT_CONFIG_INACTIVE_SCALE,\n} from './constants';\nimport { withTransition } from '../../withTransition';\nimport { noop, useStableCallback } from '../../utilities';\nimport type { TabBarViewProps } from '../../types';\nimport type { MaterialTabBarConfig, MaterialTabBarItemConfig } from './types';\nimport { styles } from './styles';\n\nconst MaterialTabBarComponent = ({\n  selectedIndex,\n  tabs,\n  duration = DEFAULT_ITEM_ANIMATION_DURATION,\n  easing = DEFAULT_ITEM_ANIMATION_EASING,\n  animation = DEFAULT_CONFIG_ANIMATION,\n  inactiveOpacity = DEFAULT_CONFIG_INACTIVE_OPACITY,\n  inactiveScale = DEFAULT_CONFIG_INACTIVE_SCALE,\n  itemInnerSpace = DEFAULT_ITEM_INNER_SPACE,\n  itemOuterSpace = DEFAULT_ITEM_OUTER_SPACE,\n  itemContainerWidth = DEFAULT_ITEM_CONTAINER_WIDTH,\n  iconSize = DEFAULT_ITEM_ICON_SIZE,\n  isRTL = DEFAULT_ITEM_LAYOUT_DIRECTION,\n  style: containerStyleOverride,\n  onLongPress = noop,\n  animatedOnChange,\n}: TabBarViewProps<MaterialTabBarConfig, MaterialTabBarItemConfig>) => {\n  //#region variables\n  const [containerLayout, setContainerLayout] = useState({\n    width: 0,\n    height: 0,\n  });\n  const [tabsPosition, setTabsPosition] = useState<{\n    [key: number]: LayoutRectangle;\n  }>([]);\n  const animatedFocusValues = useMemo(\n    () =>\n      tabs.map((_, index) =>\n        withTransition({\n          index,\n          selectedIndex,\n          duration,\n          easing,\n        })\n      ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [tabs, duration, easing]\n  );\n  //#endregion\n\n  //#region Styles\n  const containerStyle = useMemo<StyleProp<ViewStyle>>(\n    () => [\n      styles.container,\n      containerStyleOverride,\n      {\n        flexDirection: isRTL ? 'row-reverse' : 'row',\n        // @ts-ignore\n        backgroundColor: tabs[selectedIndex._value ?? 0].ripple.color,\n      },\n    ],\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [containerStyleOverride, isRTL]\n  );\n  const rawButtonStyle = useMemo(\n    () => (itemContainerWidth === 'fill' ? { flex: 1 } : {}),\n    [itemContainerWidth]\n  );\n  //#endregion\n\n  //#region callbacks\n  const handleTabItemLayout = useStableCallback((index, position) => {\n    setTabsPosition(state => {\n      return { ...state, [index]: position };\n    });\n  });\n  const handleContainerLayout = useStableCallback(\n    ({\n      nativeEvent: {\n        layout: { height, width },\n      },\n    }: LayoutChangeEvent) => {\n      setContainerLayout({ height, width });\n    }\n  );\n  //#endregion\n\n  // render\n  return (\n    <View style={containerStyle} onLayout={handleContainerLayout}>\n      {Object.keys(tabsPosition).length === tabs.length ? (\n        <MaterialTabBarRipple\n          tabs={tabs}\n          tabItemPositions={Object.values(tabsPosition)}\n          selectedIndex={selectedIndex}\n          animatedFocusValues={animatedFocusValues}\n          width={containerLayout.width}\n          height={containerLayout.height}\n        />\n      ) : null}\n      {tabs.map(({ key, title, ...configs }, index) => {\n        return (\n          <RawButton\n            key={key}\n            index={index}\n            selectedIndex={selectedIndex}\n            accessibilityLabel={title}\n            style={rawButtonStyle}\n            animatedOnChange={animatedOnChange}\n            onLayout={handleTabItemLayout}\n            onLongPress={onLongPress}\n          >\n            <MaterialTabBarItem\n              index={index}\n              animatedFocus={animatedFocusValues[index]}\n              animation={animation}\n              inactiveOpacity={inactiveOpacity}\n              inactiveScale={inactiveScale}\n              label={title}\n              itemInnerSpace={itemInnerSpace}\n              itemOuterSpace={itemOuterSpace}\n              itemContainerWidth={itemContainerWidth}\n              iconSize={iconSize}\n              isRTL={isRTL}\n              {...configs}\n            />\n          </RawButton>\n        );\n      })}\n    </View>\n  );\n};\n\nconst MaterialTabBar = memo(MaterialTabBarComponent, isEqual);\n\nexport default MaterialTabBar;\n"]}