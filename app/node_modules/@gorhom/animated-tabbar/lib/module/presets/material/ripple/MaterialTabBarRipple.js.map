{"version":3,"sources":["MaterialTabBarRipple.tsx"],"names":["React","memo","useMemo","useRef","Dimensions","processColor","Svg","Circle","Animated","interpolate","useCode","call","add","sub","Extrapolate","abs","onChange","eq","cond","set","Value","isEqual","useValues","get","useValue","styles","AnimatedCircle","createAnimatedComponent","SCREEN_WIDTH","width","MaterialTabBarRippleComponent","selectedIndex","tabs","tabItemPositions","animatedFocusValues","height","svgRef","animatedMounted","animatedValue","animatedColors","map","item","ripple","color","containerStyle","container","animatedXs","x","animatedCircleX","animatedYs","y","animatedCircleY","animatedRadius","animatedCircleRadius","inputRange","outputRange","extrapolate","CLAMP","animatedCircleFill","setSVGBackground","args","current","setNativeProps","backgroundColor","MaterialTabBarRipple"],"mappings":"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","sourcesContent":["import React, { memo, useMemo, useRef } from 'react';\nimport { LayoutRectangle, Dimensions, processColor } from 'react-native';\nimport Svg, { SvgProps, Circle } from 'react-native-svg';\nimport Animated, {\n  interpolate,\n  useCode,\n  call,\n  add,\n  sub,\n  Extrapolate,\n  abs,\n  onChange,\n  eq,\n  cond,\n  set,\n  Value,\n} from 'react-native-reanimated';\n// @ts-ignore ðŸ˜ž\nimport isEqual from 'lodash.isequal';\nimport { useValues, get, useValue } from 'react-native-redash';\nimport type { MaterialTabBarItemConfig } from '../types';\nimport { styles } from './styles';\n\nconst AnimatedCircle = Animated.createAnimatedComponent(Circle);\n\ninterface MaterialTabBarRippleProps {\n  tabs: Array<MaterialTabBarItemConfig>;\n  tabItemPositions: Array<LayoutRectangle>;\n  animatedFocusValues: Array<Animated.Node<number>>;\n  selectedIndex: Animated.Node<number>;\n  width: number;\n  height: number;\n}\n\nconst SCREEN_WIDTH = Dimensions.get('screen').width;\n\nconst MaterialTabBarRippleComponent = ({\n  selectedIndex,\n  tabs,\n  tabItemPositions,\n  animatedFocusValues,\n  width = SCREEN_WIDTH,\n  height = 0,\n}: MaterialTabBarRippleProps) => {\n  //#region variables\n  const svgRef = useRef<React.Component<SvgProps, any, any>>(null);\n  const animatedMounted = useValue(0);\n  const animatedValue = get(animatedFocusValues, selectedIndex, new Value(1));\n  const animatedColors = useValues(\n    ...tabs.map(item => processColor(item.ripple.color))\n  );\n  //#endregion\n\n  //#region styles\n  const containerStyle = useMemo(\n    () => [\n      styles.container,\n      {\n        width,\n        height,\n      },\n    ],\n    [width, height]\n  );\n  //#endregion\n\n  //#region Ripple\n  const animatedXs = useValues(\n    ...tabItemPositions.map(item => item.x + item.width / 2)\n  );\n  const animatedCircleX = get(animatedXs, selectedIndex, new Animated.Value(0));\n  const animatedYs = useValues(\n    ...tabItemPositions.map(item => item.y + item.height / 2)\n  );\n  const animatedCircleY = get(animatedYs, selectedIndex, new Animated.Value(0));\n  const animatedRadius = animatedXs.map(x =>\n    add(width / 2, abs(sub(width / 2, x)))\n  );\n  const animatedCircleRadius = interpolate(animatedValue, {\n    inputRange: [0, 1],\n    outputRange: [0, get(animatedRadius, selectedIndex, new Animated.Value(0))],\n    extrapolate: Extrapolate.CLAMP,\n  });\n  const animatedCircleFill = get(\n    animatedColors,\n    selectedIndex,\n    new Animated.Value(processColor('white'))\n  );\n  //#endregion\n\n  //#region callbacks\n  const setSVGBackground = call([selectedIndex], args => {\n    // @ts-ignore\n    svgRef.current!.setNativeProps({\n      backgroundColor: tabs[args[0]].ripple.color,\n    });\n  });\n  //#endregion\n\n  //#region effects\n  useCode(\n    () => [\n      onChange(animatedValue, cond(eq(animatedValue, 1), setSVGBackground)),\n      cond(eq(animatedMounted, 0), [setSVGBackground, set(animatedMounted, 1)]),\n    ],\n    [selectedIndex]\n  );\n  //#endregion\n  return (\n    <Svg\n      ref={svgRef}\n      pointerEvents=\"none\"\n      width={width}\n      height={height}\n      style={containerStyle}\n    >\n      <AnimatedCircle\n        pointerEvents=\"none\"\n        fill={animatedCircleFill}\n        r={animatedCircleRadius}\n        cy={animatedCircleY}\n        cx={animatedCircleX}\n      />\n    </Svg>\n  );\n};\n\nconst MaterialTabBarRipple = memo(MaterialTabBarRippleComponent, isEqual);\n\nexport default MaterialTabBarRipple;\n"]}